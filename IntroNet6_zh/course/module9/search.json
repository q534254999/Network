{"list":["9.0.1.1","9.0.1.2","9.1.1.1","9.1.1.2","9.1.1.3","9.1.1.4","9.1.1.5","9.1.1.6","9.1.1.7","9.1.2.1","9.1.2.2","9.1.2.3","9.1.2.4","9.1.2.5","9.1.2.6","9.1.2.7","9.1.2.8","9.1.2.9","9.1.2.10","9.2.1.1","9.2.1.2","9.2.1.3","9.2.1.4","9.2.1.5","9.2.1.6","9.2.1.7","9.2.2.1","9.2.2.2","9.2.2.3"],"map":{"0":[16],"1":[15,16,19,20,21,24,26],"2":[1,16,20,21,24],"3":[20,21],"4":[21],"5":[1,15],"6":[1],"7":[15],"8":[1,12],"20":[10],"21":[14],"80":[14,15],"168":[15],"1024":[16],"1099":[15],"1151":[1],"1985":[16],"49152":[16],"传输层":[0],"数据网络和":[0],"internet":[0],"通过提供可靠的人际通信来支持以人为本的网络。人们可以在一台设备上使用多种应用和服务来发送消息或者检索信息，例如电子邮件、web":[0],"和即时消息等。这些应用程序发出的数据经过封装传输，最终送达目的设备上的相应应用程序。":[0],"我们之前曾介绍过，osi":[0],"传输层的进程从应用层接收数据，然后进行相应处理以便用于网络层编址。源计算机与接收计算机通信，决定如何将数据划分为数据段，如何确保不会丢失任何数据段，以及如何验证所有数据段均已到达。我们可以把传输层想象成一个运输部门，负责准备一个订单的多个包裹以供运输。":[0],"课堂练习":[1],"我们需要联系":[1],"游戏":[1],"注意：本练习最好由每组":[1],"到":[1,16,20,21],"名学生的中型组完成。":[1],"教师会将一段复杂消息低声告诉组中的第一个学生。例如，消息可能是":[1],"期末考试将在":[1],"月":[1],"日星期二下午":[1],"点在":[1],"教室进行":[1],"。":[1],"该学生将这段消息低声告诉组中的下一个学生。每组按照这个顺序进行，直到每组所有成员都听到低声传来的消息。必须遵循以下规则：":[1],"只能对相邻的人低声说一次消息。":[1],"消息必须连续传递，不能跳过任何参与者。":[1],"教师可要求学生记录消息从第一个学生传输到最后一个学生所花费的时间。最好是由第一个人或最后一个人来记录时间。":[1],"最后一名学生大声说出所听到的内容。":[1],"然后，教师再次陈述原始消息，以便各组将其与组中最后一名学生陈述的消息作比较。":[1],"我们需要联系（说明）":[1],"传输层的作用":[2],"传输层负责在两个应用程序之间建立临时通信会话和在它们之间传递数据。应用程序生成从源主机的应用程序发送到目的主机的应用程序的数据。这不考虑目的主机类型、数据必须通过的介质类型、数据使用的路径、链路拥塞情况或网络大小。如图所示，传输层是应用层与负责网络传输的下层之间的链路。":[2],"传输层的职责":[3],"跟踪各个会话":[3],"在传输层中，源应用程序和目的应用程序之间传输的每个数据集称为会话（图":[3],"1）。每台主机上都可以有多个应用程序同时在网络上通信。每个应用程序都与一台或多台远程主机上的一个或多个应用程序通信。传输层负责维护并跟踪这些会话。":[3],"数据分段和数据段重组":[3],"数据必须准备好用易管理的片段通过介质发送出去。大多数网络对单个数据包能承载的数据量都有限制。传输层协议的服务可将应用程序数据分为大小适中的数据块（图":[3],"2）。该服务包括每段数据所需的封装功能。报头用于重组，每个数据块都会添加一个报头。此报头用于跟踪数据流。":[3],"数据片段到达目的设备后，传输层必须能将其重组为可用于应用层的完整数据流。传输层协议规定了如何使用传输层报头信息来重组要传送到应用层的数据片段。":[3],"标识应用程序":[3],"为了将数据流传送到适当的应用程序，传输层必须要标识目标应用程序（图":[3],"3）。因此，传输层为每一个应用程序分配一个标识符，称为端口号。在每台主机中，每个需要访问网络的软件进程都将被分配一个唯一的端口号。":[3],"会话多路复用":[4],"将某些类型的数据（如视频流）作为完整的通信流在网络中发送，会使用所有可用带宽。这会阻止其他通信同时发生。而且也难以对损坏的数据开展错误恢复和重新传输的工作。":[4],"图中显示了数据被分割成更小的块，在同一网络上交替（多路复用）实现不同用户的不同通信。":[4],"为了识别每段数据，传输层向几个字段添加包含二进制数据的报头。不同的传输层协议通过这些字段值在管理数据通信过程中执行各自的功能。":[4],"传输层可靠性":[5],"传输层还负责管理会话的可靠性要求。不同的应用程序有不同的传输可靠性要求。":[5],"ip":[5,8,15,17],"只涉及数据包的结构、地址分配和路由。ip":[5],"不指定数据包的传送或传输方式。传输协议则指定在主机之间传输报文的方式。如图所示，tcp":[5],"提供两种传输层协议，即传输控制协议":[5],"tcp":[5,6,7,8,9,10,11,13,16,17,18,19,20,21,22,23,24,25,26,27,28],"和用户数据报协议":[5],"udp":[5,7,9,11,12,13,18],"。ip":[5],"使用这些传输协议来实现主机的数据通信和传输。":[5],"被认为是可靠且功能齐全的传输层协议，用于确保所有数据到达目的设备。但是，这需要":[5],"报头中包含其他字段，这会增加数据包的大小，同时也会增加延迟。相反，udp":[5],"是不提供可靠性的一个比较简单的传输层协议。因此，udp":[5],"的字段较少而且比":[5],"更快。":[5],"传输类似于从源到目的地跟踪发送的数据包。如果快递订单分多个数据包，客户可以在线查看发货顺序。":[6],"使用":[6,16,24],"的三项基本的可靠性操作：":[6],"计算并跟踪从特定应用程序发送到特定主机的数据段的数量。":[6],"确认收到数据":[6],"在一定时间段后，重新发送任何未确认的数据。":[6],"单击图中的":[6,7,23,27,28],"播放":[6,7,23,27,28],"，观看":[6,7,27,28],"数据段和确认信息从发送方传输到接收方的过程。":[6],"可靠性功能在应用程序之间实现更强大的通信，与此同时，也会在传输过程中带来额外的开销和可能的延迟。这样，可靠性和网络资源负载之间就达成了平衡。通过增加负载来确保某些应用程序的可靠性会降低应用程序的有效性，甚至会有损应用程序。在这种情况下，更适合用":[7],"传输协议。":[7],"仅提供在相应应用程序之间传输数据段的基本功能，需要很少的开销和数据检查。udp":[7],"是一种尽力传输协议。在网络环境中，尽力传输被称为不可靠传输，因为它缺乏目的设备对所收到数据的确认机制。udp":[7],"中没有通知发送方是否成功传输的传输层流程。":[7],"类似于邮寄未挂号的常规信件。发件人不知道收件人是否能够接收信件。邮局也不负责跟踪信件或在信件未到达最终目的地时通知发件人。":[7],"数据段从发送方传输到接收方的动画。":[7],"正确的应用程序使用正确的传输层协议":[8],"在一些应用程序中，数据段必须按照特定的顺序到达，才能顺利处理；对于其他应用程序，必须完全接收所有数据才会有用。在这两种情况下，使用":[8],"作为传输协议。应用程序开发人员必须根据应用程序的需求，选择适合的传输层协议类型。":[8],"例如，数据库、web":[8],"浏览器和电子邮件客户端等应用程序，要求发送的所有数据都必须以原始形式到达目的地。任何数据的丢失都可能导致通信失败，要么不能完成通信，要么通信的信息不可读。这些应用程序设计为使用":[8],"tcp。":[8],"在其他情况下，应用程序可以容忍在网络传输过程中丢失部分数据，但是不接受传输中出现延迟。由于需要的网络开销较少，udp":[8],"是这些应用程序的更好选择。udp":[8],"是流实时音频、实时视频和":[8],"语音":[8],"voip":[8,13],"之类应用程序的首选。确认和重新发送会拖慢传输速度。":[8],"例如，如果视频数据流中的一段或者两段数据未到达目的地，就会造成数据流的短暂中断。这可能表现为图像失真或声音失真，用户也许不会察觉。如果目的设备必须负责处理丢失的数据，则流可能在等待重新发送的过程中被推迟，从而导致图像或声音的质量大大降低。在这种情况下，最好利用接收到的数据段呈现最佳介质，并放弃可靠性。":[8],"注意：存储音频和视频流的应用程序使用":[8],"tcp。例如，如果您的网络突然不能支持观看一个点播电影所需的带宽，则应用程序使播放暂停。在暂停期间，您可能会看到一个":[8],"缓冲":[8],"消息，这时，tcp":[8],"正在重建流。所有的片段都井然有序且恢复最低限度的带宽时，您的":[8],"会话重新开始，电影开始播放。":[8],"功能":[9,11],"要了解":[9],"和":[9,13,18,22],"的差异，就必须了解每种协议如何实现特定的可靠性功能，以及它们如何跟踪会话。除了支持数据分段和重组的基本功能之外，tcp":[9],"还提供如图所示的以下服务：":[9],"建立会话":[9],"是一种面向连接的协议。面向连接的协议在转发任何流量之前，在源设备和目的设备之间协商并建立永久连接（或会话）。通过建立会话，设备可以协商特定时间能够转发的流量，而且两个设备之间的通信数据可得到严格管理。":[9],"可靠传输":[9],"在网络术语中，可靠性指确保从源设备发送的每个数据段都能够到达目的设备。由于多种原因，数据段在网络传输过程中可能会损坏或者完全丢失。":[9],"同序传输":[9],"由于网络可能提供了多条路由，每条路由又有不同的传输速率，所以可能导致数据抵达的顺序错乱。通过对数据段编号和排序，tcp":[9],"可以确保按正确的顺序重组这些数据段。":[9],"流量控制":[9],"网络主机的内存或处理能力等资源有限。当":[9],"发现这些资源超负荷运转时，它可以请求源应用程序降低数据流速。为此，tcp":[9],"会调整源设备传输的数据量。流量控制可避免当接收主机的资源不堪重负时，数据的重新传输。":[9],"有关":[9,11],"的详细信息，请参阅":[9,11],"rfc。":[9,11],"报头":[10,12],"是一种状态协议。状态协议是跟踪通信会话状态的协议。为了跟踪会话的状态，tcp":[10],"记录已发送的信息和已确认的信息。状态会话开始于会话建立时，结束于会话终止时。":[10],"如图所示，每个":[10],"数据段都有":[10],"字节的开销用于在报头中封装应用层数据。":[10],"源端口（16":[10],"位）和目的端口（16":[10],"位）":[10],"用于识别应用程序。":[10],"序列号（32":[10],"用于数据重组。":[10],"确认号（32":[10],"表示收到的数据。":[10],"报头长度（4":[10],"称为":[10],"数据偏移量":[10],"。表示":[10],"数据段报头的长度。":[10],"保留（6":[10],"此字段留作将来使用。":[10],"控制位（6":[10],"包括位码或标志，表示":[10],"数据段的用途和功能。":[10],"窗口大小（16":[10],"表示可以一次接受的字节的数量。":[10],"校验和（16":[10],"用于数据段报头和数据的错误检查。":[10],"紧急（16":[10],"表示数据是否紧急。":[10],"用户数据报协议":[11],"是一种尽力传输协议。udp":[11],"是一种轻型传输协议，提供与":[11],"相同的数据分段和重组功能，但是没有":[11],"所提供的可靠性和流量控制。udp":[11],"协议非常简单，通常描述它与":[11],"比较而言所不提供的功能。":[11],"图中描述了":[11],"的功能。":[11],"是无状态协议，这意味着客户端和服务器都不会跟踪通信会话的状态。如果使用":[12],"作为传输协议时要求可靠性，必须由应用程序来处理可靠性。":[12],"通过网络传输实时视频和语音的一个最重要的要求是数据持续高速传输。实时视频和语音应用程序能够容忍具有极小或没有明显影响的一些数据丢失，非常适合于":[12],"udp。。":[12],"如图所示，udp":[12],"中的通信数据段称为数据报。这些数据报通过传输层协议尽力传送。udp":[12],"具有":[12],"字节的低开销":[12],"多个单独会话":[13],"传输层必须能够划分和管理具有不同传输要求的多个通信。用户希望能够同时收发电子邮件和即时消息、浏览网站和进行":[13],"电话呼叫。尽管可靠性要求不同，这些应用程序仍将同时通过网络发送和接收数据。此外，电话呼叫的数据不会传送到":[13],"web":[13,14,15,19],"浏览器上；同样，即时消息的内容也不会显示在电子邮件中。":[13],"通过使用唯一标识应用程序的报头字段来管理这些多个同时进行的会话。这些唯一标识符就是端口号。":[13],"端口号":[14],"源端口号与本地主机上的始发应用程序相关联；而目的端口号则与远程主机上的目的应用程序相关联。":[14],"源端口":[14],"源端口号由发送方设备动态生成，用于标识两台设备之间的会话。这就使多个会话能够同时发生。设备通常可以同时发送多个":[14],"http":[14],"服务请求到":[14],"服务器。根据源端口号可以跟踪每个单独的":[14],"会话。":[14],"目的端口":[14],"如图所示，客户端将目的端口号放到数据段内，以此通知目的服务器请求的是什么服务。例如，当客户端在目的端口中指定端口":[14],"时，接收该消息的服务器就知道请求的是":[14],"服务。服务器可同时提供多个服务，例如在端口":[14],"上提供":[14],"服务，并同时在端口":[14],"上提供建立文件传输协议":[14],"ftp":[14],"连接的服务。":[14],"套接字对":[15],"源端口和目的端口都被置入数据段内，然后数据段封装于":[15],"数据包内。ip":[15],"数据包中含有源":[15],"地址和目的":[15],"地址。源":[15],"地址和源端口号的组合或者目的":[15],"地址和目的端口号的组合，称为套接字。套接字用于标识客户端所请求的服务器和服务。客户端套接字可能如下所示，其中":[15],"代表源端口号：192":[15],"服务器上的套接字则可能是：192":[15],"这两个套接字组合在一起形成一个套接字对：192":[15],"1099，192":[15],"有了套接字，一台客户端上运行的多个进程便可彼此区分，它们与同一服务器进程建立的多个连接也可以彼此区分。":[15],"对于请求数据的应用程序而言，该源端口号就像是一个返回地址。传输层将跟踪此端口和发出该请求的应用程序，当返回响应时，传输层可以将其转发到正确的应用程序。":[15],"端口号组":[16],"互联网数字分配机构":[16],"iana":[16],"是负责分配各种编址标准（包括端口号）的标准机构。如图":[16],"所示，端口号有如下不同类型：":[16],"公认端口（端口":[16],"1023）":[16],"这些编号用于服务和应用程序。web":[16],"浏览器、电子邮件客户端以及远程访问客户端等应用程序通常使用这些端口号。通过为服务器应用程序定义公认端口，可以将客户端应用程序设定为请求特定端口及其相关服务的连接。":[16],"注册端口（端口":[16],"49151）":[16],"这些端口号由":[16],"分配给请求实体以用于特定进程或应用程序。这些进程主要是用户选择安装的一些应用程序，而不是已经分配了公认端口号的常用应用程序。例如，思科已将端口":[16],"注册为其热备份路由器协议":[16],"hsrp":[16],"进程。":[16],"动态或私有端口（端口":[16],"65535）":[16],"也称为临时端口。这些端口往往在开始连接服务时由客户端操作系统动态分配。动态端口用于在通信期间识别客户端应用程序。":[16],"注意：一些客户端操作系统在分配源端口时可能使用注册端口号而不是动态端口号。":[16],"图":[16],"显示了一些常见公认端口号及其相关应用程序。一些应用程序可能既使用":[16],"tcp，又使用":[16],"udp。例如，当客户端向":[16],"dns":[16],"服务器发送请求时，dns":[16],"udp。但是，两个":[16],"服务器之间的通信总是使用":[16],"单击此处查看":[16],"网站上端口号及相关应用程序的完整列表。":[16],"netstat":[17],"命令":[17],"不明的":[17],"连接可能造成重大的安全威胁。因为此类连接表示某程序或某人正连接到本地主机。有些时候，需要了解联网主机中启用并运行了哪些活动":[17],"连接。netstat":[17],"是一种重要的网络实用程序，可用来检验此类连接。如图所示，输入命令":[17],"可列出正在使用的协议、本地地址和端口号、外部地址和端口号以及连接的状态。":[17],"默认情况下，netstat":[17],"命令会尝试将":[17],"地址解析为域名，将端口号解析为公认应用程序。":[17],"n":[17],"选项可用于显示数字形式的":[17],"地址和端口号。":[17],"练习":[18,25],"比较":[18],"的特点":[18],"服务器进程":[19],"服务器上运行的每个应用程序进程都配置有一个端口号，由系统默认分配或者系统管理员手动分配。在同一传输层服务中，服务器不能同时存在具有相同端口号的两个不同服务。":[19],"例如，主机同时运行":[19],"服务器应用程序和文件传输应用程序时，不能为两个应用程序配置相同的端口（如":[19],"端口":[19],"80）。分配给特定端口的活动服务器应用程序应该是开放的，也就是说，传输层将接受并处理分配到该端口的数据段。所有发送到正确套接字地址的传入客户端请求都将被接受，数据将被传送到服务器应用程序。在同一服务器上可以同时开启很多端口，每个端口对应一个动态服务器应用程序。":[19],"请参阅图":[19],"到图":[19],"5，查看":[19],"客户端":[19],"服务器操作中源端口和目的端口的典型配置。":[19],"连接的建立":[20],"在一些文化中，两个人见面时常常通过握手来问好。双方都把握手的行为理解为友好问候的信号。网络中的连接是类似的。在":[20],"连接中，主机客户端与服务器建立连接。":[20],"连接分三个步骤建立：":[20],"第":[20,21,24],"步":[20,21],"源客户端请求与服务器进行客户端":[20],"服务器通信会话。":[20],"服务器确认客户端":[20],"服务器通信会话，并请求服务器":[20],"客户端通信会话。":[20],"源客户端确认服务器":[20],"在图中，依次单击按钮":[20,21],"3，查看":[20],"连接的建立过程。":[20],"会话终止":[21],"若要关闭连接，数据段报头必须设置完成":[21],"fin":[21],"控制标志。为终止每个单向":[21],"会话，需采用包含":[21],"数据段和确认":[21],"ack":[21],"数据段的二次握手。因此，若要终止":[21],"支持的整个会话过程，需要实施四次交换，以终止两个双向会话。":[21],"4，查看":[21],"连接的终止。":[21],"注意：在本部分中，为了更容易理解，采用了客户端和服务器这两个术语进行说明。实际上，终止的过程可以在任意两台具有开放会话的主机之间展开：":[21],"当客户端的数据流中没有其他要发送的数据时，它将发送带":[21],"标志设置的数据段；":[21],"服务器发送":[21],"信息，确认收到从客户端发出的请求终止会话的":[21],"信息；":[21],"服务器向客户端发送":[21],"信息，终止从服务器到客户端的会话；":[21],"客户端发送":[21],"响应信息，确认收到从服务器发出的":[21],"信息。":[21],"当所有数据段得到确认后，会话关闭。":[21],"三次握手分析":[22],"主机跟踪会话过程中的每个数据段，并使用":[22],"报头信息交换已接收数据的相关信息。tcp":[22],"是全双工协议，每个连接都代表两个单向通信数据流或会话。若要建立连接，主机应执行三次握手。tcp":[22],"报头中的控制位指出了连接的进度和状态。":[22],"三次握手：":[22],"确认目的设备存在于网络上；":[22],"确认目的设备有活动的服务，并且正在源客户端要使用的目的端口号上接受请求；":[22],"通知目的设备源客户端想要在该端口号上建立通信会话。":[22],"通信完成后，将关闭会话并终止连接。连接和会话机制保障了":[22],"的可靠性功能。":[22],"数据段报头的控制位字段中的六位被称为标志。标志是设置为开启或关闭的位。请单击图中的控制位字段，查看所有六个标志。我们已经讨论过":[22],"syn、ack":[22],"fin。rst":[22],"标志用于在出现错误或超时时重置连接。单击此处了解":[22],"psh":[22],"urg":[22],"标志的详细信息。":[22],"视频演示":[23,27,28],"三次握手":[23,24],"，观看使用":[23],"wireshark":[23,24],"的":[23],"三次握手视频演示。":[23],"单击此处下载视频支持文档。":[23,27,28],"单击此处可阅读本视频的脚本。":[23,27,28],"实验":[24],"观察":[24],"在本实验中，您将完成以下目标：":[24],"部分：准备":[24],"以捕获数据包":[24],"部分：捕获、定位和检查数据包":[24],"连接和终止过程":[25],"可靠性":[26],"按序传送":[26],"数据段到达目的地的顺序可能是混乱的。因此，为了让目的设备理解原始消息，将重组这些数据段，使其恢复原有顺序。每个数据包中的数据段报头中都含有序列号，便于进行数据重组。序列号代表":[26],"数据段的第一个数据字节。":[26],"在会话建立过程中，将设置初始序列号":[26],"isn":[26],"。此":[26],"表示该会话中传输到接收应用程序的字节起始值。在会话过程中，每传送一定字节的数据，序列号就随之增加。通过这样的数据字节跟踪，可以唯一标识并确认每个数据段，还可以标识丢失的数据段。":[26],"注意：isn":[26],"并不是从":[26],"开始，而实际上是随机的号码。这样做的目的是防止某些类型的恶意攻击。为简单起见，本章的示例中我们将使用":[26],"作为":[26],"isn。":[26],"如图所示，数据段的序列号用于指示如何重组和重新排序收到的数据段。":[26],"接收方的":[26],"进程将数据段中的数据存入缓存区，而数据段则按照正确的序列顺序进行排列，重组后发送到应用层。对于序列号混乱的数据段，将被保留以备后期处理。等缺失的数据段到达后，再来按顺序处理这些数据段。":[26],"序列号和确认":[27],"的其中一项功能是确保每个数据段都能到达目的地。在目的主机上的":[27],"服务确认该源应用程序收到的数据。":[27],"序列号和确认的课程。":[27],"数据丢失和重传":[28],"无论网络设计得如何完美，数据丢失都会时常发生；因此，tcp":[28],"提供了管理数据段丢失的方法。其中一个方法就是重新传输未确认的数据。":[28],"播放图中的视频，并单击链接下载":[28],"pdf":[28],"文件。视频和":[28],"文件用于检查":[28],"数据丢失和重传。":[28],"重传的课程。":[28]}}